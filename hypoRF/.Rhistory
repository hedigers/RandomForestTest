y~., data=d[li == x,], ... )$prediction.error)
})), nrow=m, ncol=K))
phi_k <- rowMeans(eps)
W_pk <- rowSums(apply(eps, 2, function(x){(x-phi_k)^2}))
phi_inc <- mean(phi_k)
V_inc <- sum((W_pk/2) - (phi_k - phi_inc)^2) / K
V_WP <- sum(W_pk) / (2 * K)
var_U <- ifelse(V_inc < 0, V_WP, V_inc)
err <- (phi_inc - 0.5) / sqrt(var_U)
pval <- pnorm(err)
return(list(pval, err, var_U))
}
hypoRF(data.frame(replicate(2,rnorm(60))), data.frame(replicate(2,rnorm(70))),K=3,probability=T)
?missing
hypoRF <- function(data1, data2, K, m=2, ...) {
if (is.numeric(K)==F) {
stop("K needs to be numeric")
}
if (is.numeric(m)==F) {
stop("m needs to be numeric")
}
if (colnames(data1)!=colnames(data2)) {
stop("colnames of the datasets do not match")
}
if (ncol(data1)!=ncol(data2)) {
stop("amount of columns in data1 and data2 not identical")
}
if (missing(probability)==F){
if(probability==T){
stop("probability=T in ranger not suitable for testing")
}
}
if (nrow(data1)!=nrow(data2)) {
warning("imbalanced dataset provied to random forest")
}
n1 <- nrow(data1)
n2 <- nrow(data2)
p <- nrow(data1)
y <- as.factor(c(rep(1,n1),rep(0,n2)))
d <- cbind(rbind(data1,data2),y)
l <- lapply(1:K, function(x) sample(cut(1:nrow(d), breaks = m, labels = F)))
eps <- t(matrix(unlist(lapply(l, function(li){
sapply(X = unique(li), function(x) ranger(
y~., data=d[li == x,], ... )$prediction.error)
})), nrow=m, ncol=K))
phi_k <- rowMeans(eps)
W_pk <- rowSums(apply(eps, 2, function(x){(x-phi_k)^2}))
phi_inc <- mean(phi_k)
V_inc <- sum((W_pk/2) - (phi_k - phi_inc)^2) / K
V_WP <- sum(W_pk) / (2 * K)
var_U <- ifelse(V_inc < 0, V_WP, V_inc)
err <- (phi_inc - 0.5) / sqrt(var_U)
pval <- pnorm(err)
return(list(pval, err, var_U))
}
hypoRF(data.frame(replicate(2,rnorm(60))), data.frame(replicate(2,rnorm(70))),K=3,probability=T)
hypoRF <- function(data1, data2, K, m=2, ...) {
if (is.numeric(K)==F) {
stop("K needs to be numeric")
}
if (is.numeric(m)==F) {
stop("m needs to be numeric")
}
if (colnames(data1)!=colnames(data2)) {
stop("colnames of the datasets do not match")
}
if (ncol(data1)!=ncol(data2)) {
stop("amount of columns in data1 and data2 not identical")
}
if (nrow(data1)!=nrow(data2)) {
warning("imbalanced dataset provied to random forest")
}
n1 <- nrow(data1)
n2 <- nrow(data2)
p <- nrow(data1)
y <- as.factor(c(rep(1,n1),rep(0,n2)))
d <- cbind(rbind(data1,data2),y)
l <- lapply(1:K, function(x) sample(cut(1:nrow(d), breaks = m, labels = F)))
eps <- t(matrix(unlist(lapply(l, function(li){
sapply(X = unique(li), function(x) ranger(
y~., data=d[li == x,], ... )$prediction.error)
})), nrow=m, ncol=K))
phi_k <- rowMeans(eps)
W_pk <- rowSums(apply(eps, 2, function(x){(x-phi_k)^2}))
phi_inc <- mean(phi_k)
V_inc <- sum((W_pk/2) - (phi_k - phi_inc)^2) / K
V_WP <- sum(W_pk) / (2 * K)
var_U <- ifelse(V_inc < 0, V_WP, V_inc)
err <- (phi_inc - 0.5) / sqrt(var_U)
pval <- pnorm(err)
return(list(pval, err, var_U))
}
debug(hypoRF)
hypoRF(data.frame(replicate(2,rnorm(60))), data.frame(replicate(2,rnorm(70))),K=3,probability=T)
x <- 2
b <- ranger(
y~., data=d[li == x,])$prediction.error
eos
eps
colnames(data.frame(replicate(1,rnorm(n))))
colnames(data.frame(replicate(1,rnorm(100))))
colnames(data.frame(replicate(2,rnorm(100))))
library(testthat)
library(hypoRF)
test_that("function hypoRF has correct input parameters", {
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K="a", m=3), "numeric")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m="a"), "numeric")
})
devtools::test()
devtools::test()
library(ranger)
?ranger
devtools::load_all()
devtools::document()
?hypoRF
f <- function(x) match.call()
f(1)
f <- function(x,..) match.call()
f(x=1,r=2,z=4)
f <- function(x,..) a <- list(...); match.call()
f <- function(x,..) {a <- list(...); match.call()}
f(x=1,r=2,z=4)
f <- function(x,..) {a <- list(...); print(a); match.call()}
f(x=1,r=2,z=4)
f <- function(x,..) {a <- list(...); sapply(a, print) match.call()}
f <- function(x,..) {a <- list(...); sapply(a, print); match.call()}
f(x=1,r=2,z=4)
f(x=1)
f(x=1,r=1)
f <- function(x,..) {mean(x,...); match.call()}
f(x=1,r=1)
f(x=1,trim=T)
mean(c(1), trim=T)
mean(c(1), trim=1)
f(x=1,r=1)
f(x=1,trim=1)
f <- function(x,..) {mean(x,...); return(match.call())}
f(x=1,trim=1)
f(x=c(1,2,3),trim=1)
f <- function(x,..) {mean(x,...); return(match.call())}
f(c(1,2,3))
f(c(1,2,3))
f <- function(x,...) {mean(x,...); return(match.call())}
f(c(1,2,3))
f(c(1,2,3), trim=1)
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, probability=T), "probability")
expect_error(hypoRF(replicate(3, rnorm(10)),
replicate(3, rnorm(10)), K=10), "data.frame")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "ncol")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "ncol")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "ncol")
devtools::documents()
devtools::document()
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "ncol")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "colums")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10), "columns")
expect_error(hypoRF(data.frame(x=rnorm(n),z=rnorm(n)),
data.frame(u=rnorm(10), z=rnorm(10)), K=10), "colnames")
expect_error(hypoRF(data.frame(x=rnorm(n),z=rnorm(10)),
data.frame(u=rnorm(10), z=rnorm(10)), K=10), "colnames")
expect_error(hypoRF(data.frame(x=rnorm(10),z=rnorm(10)),
data.frame(u=rnorm(10), z=rnorm(10)), K=10), "colnames")
devtools::document()
expect_error(hypoRF(data.frame(x=rnorm(10),z=rnorm(10)),
data.frame(u=rnorm(10), z=rnorm(10)), K=10), "colnames")
expect_error(hypoRF(data.frame(replicate(3, rnorm(11))),
data.frame(replicate(3, rnorm(10))), K=10), "imbalanced")
expect_error(hypoRF(data.frame(replicate(3, rnorm(11))),
data.frame(replicate(3, rnorm(10))), K=10), "imbalanced")
devtools::document()
expect_error(hypoRF(data.frame(replicate(3, rnorm(11))),
data.frame(replicate(3, rnorm(10))), K=10), "imbalanced")
expect_warning(hypoRF(data.frame(replicate(3, rnorm(11))),
data.frame(replicate(3, rnorm(10))), K=10), "imbalanced")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m=Inf), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m="a"), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K="a", m=3), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=Inf, m=3), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=0, m=3), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m="a"), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m=Inf), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=10, m=1), "not valid")
devtools::test()
n1 <- 3
n2 <- 10
as.factor(rep(c(0,1), each=c(n1,n2)))
y <- factor(c(rep(1,n1),rep(0,n2)))
y
pnrom
?pnorm
expect_error(hypoRF(data.frame(x=rnorm(10),y=rnorm(10)),
data.frame(x=rnorm(10), y=rnorm(10)), K=10), "reserved")
devtools::document()
expect_error(hypoRF(data.frame(x=rnorm(10),y=rnorm(10)),
data.frame(x=rnorm(10), y=rnorm(10)), K=10), "reserved")
devtools::document()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
library(hypoRF)
?ranger
library(ranger)
?ranger
require(devtools)
load_all(hypoRF)
load_all(hypoRF.R)
load_all()
load_all()
?hypoRF
load_all()
?hypoRF
document()
load_all()
?hypoRF
example(hypoRF)
?ranger
?rt
document()
require(devtools)
document()
load_all()
example(hypoRF)
?hypoRF
library(devtools)
load_all()
library(testthat)
library(hypoRF)
test_check("hypoRF")
document()
library(testthat)
library(hypoRF)
test_check("hypoRF")
context("test of function hypoRF")
test_that("function hypoRF has correct input parameters", {
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), seed="a"), "seed")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), seed=Inf), "seed")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), seed=-1), "seed")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), probability=T), "probability")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), normalapprox=1), "not logical")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), normalapprox="a"), "not logical")
expect_error(hypoRF(replicate(3, rnorm(10)),
replicate(3, rnorm(10))), "data.frame")
expect_error(hypoRF(data.frame(replicate(5, rnorm(10))),
data.frame(replicate(3, rnorm(10)))), "columns")
expect_error(hypoRF(data.frame(x=rnorm(10),z=rnorm(10)),
data.frame(u=rnorm(10), z=rnorm(10))), "colnames")
expect_error(hypoRF(data.frame(x=rnorm(10),y=rnorm(10)),
data.frame(x=rnorm(10), y=rnorm(10))), "reserved")
expect_warning(hypoRF(data.frame(replicate(3, rnorm(11))),
data.frame(replicate(3, rnorm(10)))), "imbalanced")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K="a"), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=Inf), "not valid")
expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
data.frame(replicate(3, rnorm(10))), K=0), "not valid")
# expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
#                     data.frame(replicate(3, rnorm(10))), K=10, m="a"), "not valid")
# expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
#                     data.frame(replicate(3, rnorm(10))), K=10, m=Inf), "not valid")
# expect_error(hypoRF(data.frame(replicate(3, rnorm(10))),
#                     data.frame(replicate(3, rnorm(10))), K=10, m=1), "not valid")
})
test()
data1 <- data.frame(replicate(5,rnorm(50)))
data2 <- data.frame(replicate(5,rnorm(50)))
K <- 10
normalapprox <- T
str(data1)
n1 <- nrow(data1)
n2 <- nrow(data2)
p  <- ncol(data1)
n <- n1 + n2
m1 <- round(0.5 * n1)
m2 <- round(0.5 * n2)
m <- round(0.5 * min(n1,n2)) # maybe set 0.5 as a parameter ???????
m
data1 <- data.frame(replicate(5,rnorm(20)))
data1 <- as.matrix(data1)
data2 <- as.matrix(data2)
n <- n1 + n2
m <- round(0.5 * min(n1, n2)) # maybe set 0.5 as a parameter ???????
y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
y_train
m
n1
n2
n1 <- nrow(data1)
n2 <- nrow(data2)
p  <- ncol(data1)
data1 <- as.matrix(data1)
data2 <- as.matrix(data2)
n <- n1 + n2
m <- round(0.5 * min(n1, n2)) # maybe set 0.5 as a parameter ???????
m
y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
y_train
idtest <- sample(1:min(n1,n2), m, replace=F)
idtest
data1train <- data1[-idtest, , drop=F]
data2train <- data2[-idtest, , drop=F]
y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
y_train
length(y_train)
n
m
n <- n1 + n2
n
y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
length(y_train)
m
n
source('C:/Users/admin/Dropbox/Econometrica_paper/Draft1_RFTestonly/R scripts/hypoRF/R/hypoRF.R')
y_train <- as.factor(c(rep(1, n1-m), rep(0, n2-m)))
y_train
y_train <- as.factor(c(rep(1, n1-m), rep(0, n2-m)))
y_train
# y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
idtest <- sample(1:min(n1,n2), m, replace=F)
data1train <- data1[-idtest, , drop=F]
data2train <- data2[-idtest, , drop=F]
data1test <- data1[idtest, , drop=F]
data2test <- data2[idtest, , drop=F]
rf <- ranger::ranger(Y~., data=data.frame(
Y=y_train, X=rbind(data1train, data2train)),...)
rf <- ranger::ranger(Y~., data=data.frame(
Y=y_train, X=rbind(data1train, data2train)))
rf
y_train
err <- sum(as.numeric(as.character(y_test) != as.character(
predict(rf, data=data.frame(Y=y_test, X=rbind(data1test, data2test)))$prediction)))
err
pvalue <- pbinom(err, size = 2*K*m, prob=0.5)
pvalue
n1 <- 50
n2 <- 50
data1 <- data.frame(replicate(5,rnorm(n1)))
data2 <- data.frame(replicate(5,rnorm(n2)))
data1 <- as.matrix(data1)
data2 <- as.matrix(data2)
n <- n1 + n2
m <- round(0.5 * min(n1, n2)) # maybe set 0.5 as a parameter ???????
y_train <- as.factor(c(rep(1, n1-m), rep(0, n2-m)))
y_train
# y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
y_test
idtest <- sample(1:min(n1,n2), m, replace=F)
data1train <- data1[-idtest, , drop=F]
data2train <- data2[-idtest, , drop=F]
data1test <- data1[idtest, , drop=F]
data2test <- data2[idtest, , drop=F]
data=data.frame(
Y=y_train, X=rbind(data1train, data2train))
View(data)
y_train <- as.factor(c(rep(1, n-m), rep(0, n-m)))
y_train
n
m
rf <- ranger::ranger(Y~., data=data.frame(
Y=y_train, X=rbind(data1train, data2train)))
data=data.frame(
Y=y_train, X=rbind(data1train, data2train))
View(data)
unique(data)
data
n1 <- 50
n2 <- 50
data1 <- data.frame(replicate(5,rnorm(n1)))
data2 <- data.frame(replicate(5,rnorm(n2)))
data1 <- as.matrix(data1)
data2 <- as.matrix(data2)
n <- n1 + n2
m <- round(0.5 * min(n1, n2)) # maybe set 0.5 as a parameter ???????
y_train <- as.factor(c(rep(1, n1-m), rep(0, n2-m)))
length(y_train)
y_test <- as.factor(c(rep(1, m), rep(0, m)))
m
idtest <- sample(1:min(n1,n2), m, replace=F)
data1train <- data1[-idtest, , drop=F]
data2train <- data2[-idtest, , drop=F]
data1test <- data1[idtest, , drop=F]
data2test <- data2[idtest, , drop=F]
y_train
rf <- ranger::ranger(Y~., data=data.frame(
Y=y_train, X=rbind(data1train, data2train)))
rf
if(c("importance") %in% names(add.param)){
if(add.param$importance == "impurity"){
importance <- as.matrix(importance(rf))
importance_ranking <- as.matrix(importance[order(importance[,1], decreasing = T),])
}
} else {
importance_ranking <- NULL
}
add.param <- list(...)
err <- sum(as.numeric(as.character(y_test) != as.character(
predict(rf, data=data.frame(Y=y_test, X=rbind(data1test, data2test)))$prediction)))
err
pvalue <- pbinom(err, size = 2*K*m, prob=0.5)
K <- 1
pvalue <- pbinom(err, size = 2*K*m, prob=0.5)
pvalue
n2 <- 10
data1 <- data.frame(replicate(5,rnorm(n1)))
data2 <- data.frame(replicate(5,rnorm(n2)))
data1 <- as.matrix(data1)
data2 <- as.matrix(data2)
n <- n1 + n2
m <- round(0.5 * min(n1, n2)) # maybe set 0.5 as a parameter ???????
y_train <- as.factor(c(rep(1, n1-m), rep(0, n2-m)))
y_test <- as.factor(c(rep(1, m), rep(0, m)))
idtest <- sample(1:min(n1,n2), m, replace=F)
y_train
y_test
data1train <- data1[-idtest, , drop=F]
data2train <- data2[-idtest, , drop=F]
data1test <- data1[idtest, , drop=F]
data2test <- data2[idtest, , drop=F]
rf <- ranger::ranger(Y~., data=data.frame(
Y=y_train, X=rbind(data1train, data2train)), ...)
err <- sum(as.numeric(as.character(y_test) != as.character(
predict(rf, data=data.frame(Y=y_test, X=rbind(data1test, data2test)))$prediction)))
pvalue <- pbinom(err, size = 2*K*m, prob=0.5)
pvalue
require(devtools)
documents()
document()
load(hypoRF)
load_all(hypoRF)
load_all()
?hypoRF
load_all()
?hypoRF
document()
load_all()
?hypoRF
document()
load_all()
?hypoRF
document()
load_all()
?hypoRF
document()
load_all()
?hypoRF
document()
load_all()
load_all()
?hypoRF
load_all()
document()
load_all()
?hypoRF
# Using the default testing procedure (permutation test)
x1 <- data.frame(rt(100, df=1.5))
x2 <- data.frame(rnorm(100))
hypoRF(x1, x2)
# Using the exact binomial test
x1
colnames(x1)
colnames(x2)
load_all()
document()
load_all()
?hypoRF
# Using the default testing procedure (permutation test)
x1 <- data.frame(x=rt(100, df=1.5))
x2 <- data.frame(x=rnorm(100))
hypoRF(x1, x2)
# Using the exact binomial test
devtools::check()
?pbinom
?var
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
